<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>CRANE Paper Presentation</title>

    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/black.css">

    <!-- Theme used for syntax highlighting of code -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>
  </head>
  <body>
    <div class="reveal">
      <div class="slides">
	<section>
	  Paxos Made Transparent: presenting <b>CRANE</b>, an SMR system to replicate general server programs.
	  <br><img src="img/crane.jpg" width="500px"><br>
	  Cui, Gu, Liu, Chen and Yang
	</section>
	<section>
	  <h4>Paxos Made Transparent: What we will cover</h4>
	  <ul>
	    <li class="fragment">Introduction and problem description</li>
	    <li class="fragment">State Machine Replication and Paxos</li>
	    <li class="fragment">Deterministic Multithreading and PARROT</li>
	    <li class="fragment">Time-bubbling and CRANE</li>
	    <li class="fragment">Implementating CRANE</li>
	    <li class="fragment">Evaluating CRANE</li>
	    <li class="fragment">Conclusion and Class Discussion</li>
	  </ul>
	</section>
	<section>	  
	  <section>
	    <p><b>Introduction and Problem Description</b></p>
	    In a network we have a situation as portrayed below. Several clients making requests from a server:
	  <br><img src="img/clientserver.png" width="500px"><br>
	  <p class="fragment">A happy network is one where the server is available.</p> 
	  </section>
	  <section>
	    <p> This means that replication to handle faults that may occur is a desirable feature. So let's replicate everything a server does in a simple, consistent, practical, and reliable way!</p>
	    <img src="img/clientservers.png" width="500px">
	  </section>
	  <section data-background-image="img/clientservers.png" data-background-opacity=".1">
	    <div class="fragment">Oh that's easy! We just need to:
	      <p class="fragment grow">understand and implement Paxos.</p>
	      <p class="fragment">Also to make it work more generally, <span class="fragment highlight-red">combine</span> it with a <span class="fragment highlight-red">deterministic</span> scheduler that can reliably handle many threads coming in <span class="fragment highlight-red">asynchronously</span>.</p></div>
	  </section>
	  <section data-background-image="img/parrot_head.jpg" data-background-opacity=".3">
	      <p>Oh, and of course, pick a cool bird acronym!</p>
	  </section>
	</section>
	<section>
	  <section data-background-image="img/paxos_island.png"></section>
	  <section data-background-image="img/paxos_island.png" data-background-opacity=".2">
	  <p class="fragment">Paxos is an island off the west coast of Greece. Leslie Lamport imagined an ancient parliamentary system: </p>
	  <blockquote class="fragment">
	  &ldquo; Recent archaeological discoveries on the island of Paxos reveal that the parliament functioned despite the peripatetic propensity of its part-time legislators. The legislators maintained consistent copies of the parliamentary record, despite their frequent forays from the chamber and the forgetfulness of their messengers.
	  </blockquote>
	  </section>
	  <section>
	    As we learned in lecture on Tuesday, Paxos is a distributed algorithm where asynchronous client requests can be processed in a fault tolerant manner via consensus. It is a protocol for state machine replication or SMR.
	  </section>
	  <section>
	    <ul>
	      <li>
		State Machine $\Rightarrow$ consists of a set of states, a set of transitions between states, and a current state. Transition to a new state happens after an operation is issued. The new state can be the same state, modeling a read only operation.
	      </li>
	      <li class="fragment">
		If this machine can no longer transition states, then it has crashed. But in an asynchronous environment, we can't tell if a machine is slow or it has crashed. 
	      </li>
	  </section>
	  <section data-background-image="img/clones.jpg" data-background-opacity=".3">
	    Enter State Machine Replication or SMR:
	    <ul>
	      <li class="fragment">It masks failures, like crashes.</li>
	      <li class="fragment">Surely we want to replicate deterministic machines, so same input + same program = same output.</li>
	      <li class="fragment">For example, a DNS server.</li>
	    </ul>
	  </section>
	</section>
	<section>
	  <section>
	    <i>Ok, this is a distributed systems class, so we are getting rid of that deterministic thing right?</i>
	    <p class="fragment">Yes!</p>
	    <p class="fragment">..ish..</p>
	  </section>
	  <section>
	    We need to distinguish determinism and stability:
	    <img src="img/mt_approaches.png" width="1400px">
	  </section>
	  <section data-background-image="img/parrot_fly.jpg" data-background-opacity=".3">
	    Enter PARROT<span class="fragment">...not an acronym, parrots are just cool!</span>
	    <p class="fragment">A practical runtime for deterministic, stable and reliable threads.</p>
	    <ul>
	      <li class="fragment">It reduces the number of schedules for all inputs.</li>
	      <li class="fragment">It allows for programmer added "hints" to prioritize computations.</li>
	      <li class="fragment">It will ignore determinism for performance critical sections.</li>
	    </ul>
	  </section>
	  <section data-background-image="img/parrot_fly.jpg" data-background-opacity=".3">
	    <img src="img/fig8and9.png" width="800px">
	  </section>
	</section>
	<section>
	  <section data-background-image="img/paxos_island.png" data-background-opacity=".3">
	    So a Parrot in Paxos...we are done right?
	    <img src="img/parrot_fly.jpg" width="400px">
	    <p>
	      <span style="display: inline-block;" class="fragment fade-right">Hi I'm a client! </span>
	      <span style="display: inline-block;" class="fragment fade-up">S'up, client here. </span>
	      <span style="display: inline-block;" class="fragment fade-down">Me too. </span>
	      <span style="display: inline-block;" class="fragment fade-left">Don't forget me, I'm a client.</span>
	    </p>
	    <p class="fragment">...and we are out of sync...</p>
	  </section>
	  <section data-background-image="img/poisson.png" data-background-opacity=".2">
	    Traffic is bursty:
	    <p class="fragment">For example: two clients make simultaneous HTTP PUT and GET requests for the same page.</p>
	    <p class="fragment">Different arrival times lead to different outcomes!</p>
	  </section>
	  <section data-background-image="img/timebubbles.gif" data-background-opacity=".3">
	    <p class="fragment fade-right"><i>Enter time-bubbling!</i></p>
	    <img src="img/fig10and12.png" width="1400px" class="fragment">
	  </section>
	   <section data-background-image="img/timebubbles.gif" data-background-opacity=".3">
	    <p class="fragment">Two parameters for this technique:</p>
	    <ul>
	      <li class="fragment">$W_{timeout}$: "the physical duration that the primary's DMT scheduler waits before it request consensus on a time bubble insertion."</li>
	      <li class="fragment">$N_{clock}$: "the number of logical clocks within each time bubble."</li>
	    </ul>
	  </section>
	  <section data-background-image="img/crane.jpg" data-background-opacity=".3">
	    <h3>
	      <span class="fragment highlight-red">C</span>orrectly <span class="fragment highlight-red">R</span>eplic<span class="fragment highlight-red">A</span>ting <span class="fragment highlight-red">N</span>ondeterministic <span class="fragment highlight-red">E</span>xecutions
	    </h3>
	    <p class="fragment"><i>Yay! They did it!</i></p>
	  </section>
	  <section data-background-image="img/crane.jpg" data-background-opacity=".3">
	    <img src="img/fig6and7.png" width="500px">
	  </section>
	  <section data-background-image="img/crane.jpg" data-background-opacity=".3">
	    <ul>
	      <li>Uses CRIU (open-source tool) to checkpoint registers and memory.</li>
	      <li>Uses LXC (Linux containers - like Docker) to checkpoint file system state.</li>
	    </ul>
	  </section>
	  <section data-background-image="img/crane.jpg" data-background-opacity=".3">
	    It is easy to use:
	    <pre><code class="hljs" data-trim contenteditable>
diff -ruN httpd-2.2.11/modules/generators/mod_cgid.c httpd-2.2.11-modified/modules/generators/mod_cgid.c
--- httpd-2.2.11/modules/generators/mod_cgid.c	2015-06-23 19:11:58.484786127 +0800
+++ httpd-2.2.11-modified/modules/generators/mod_cgid.c	2015-06-23 19:12:56.676785084 +0800
@@ -564,8 +564,10 @@
     ap_log_error(APLOG_MARK, APLOG_ERR, err, r->server, "%s", description);
 }
 
+#include <tern/user.h>
 static int cgid_server(void *data)
 {
+    tern_disable_sched_paxos();  
     struct sockaddr_un unix_addr;
     int sd, sd2, rc;
     mode_t omask;
	    </code></pre>
	    <i>an example of a performance hint</i>
	    <br>
	    <a href="https://github.com/columbia/crane" target="_blank">github.com/columbia/crane</a>
	  </section>
	</section>
	<section>
	  <h3>Evaluation</h3>
	  <ul>
	    <li class="fragment">
	      They tested CRANE using a set of 3 replicas:
	      <ul>
		<li>Linux 3.13.0, 1Gbps bandwidth LAN</li>
		<li>2.80 GHz dual-socket hex-core Intel Xeon with 24 hyperthreading cores</li>
		<li>64GB memory, and 1TB SSD</li>
	      </ul>
	    </li>
	    <br>
	    <li class="fragment">
	      On 5 widely used server programs:
	      	<table>			
		  <tbody>
		    <tr>
		      <td>Apache</td>
		      <td>Mongoose</td>
		    </tr>
		    <tr>
		      <td>MediaTomb</td>
		      <td>ClamAV</td>
		    </tr>
		    <tr>
		      <td>MySQL</td>
		    </tr>
		  </tbody>
		</table>
	    </li>
	  </ul>
	</section>
	<section>
	  <section>
	    <img src="img/fig14.png" width="800px">
	  </section>
	  <section>
	    <img src="img/fig15.png" width="800px">
	  </section>
	  <section>
	    <img src="img/fig16.png" width="800px">
	  </section>
	  <section>
	    <img src="img/fig17.png" width="800px">
	  </section>
	</section>
	<section>
	  <section data-background-image="img/question_marks.jpg" data-background-opacity=".1">
	    <h2>Discussion</h2>
	  </section>
	  <section>
	    <ul>
	      <li>CRANE can be summarized as "PARROT (stable deterministic multithreading) with PAXOS" - why is both stability <b>and</b> determinism important?</li><br>
	      <li class="fragment">What are some limitations of the CRANE and/or PARROT systems?</li>
	    </ul>
	  </section>
	  <section>
	    <ul>
	      <li class="fragment">CRANE performance depends on adding PARROT "performance hints" to indicate "these are the major computations to line up." The authors emphasize the brevity of these hints - what would you suggest to also make it <b>easier</b> to diagnose and correctly insert them?</li><br>
	      <li class="fragment">What suggestions for enhancement or further work would you make for the CRANE system (with a primary goal of encouraging adoption and broad utility)?</li>
	    </ul>
	  </section>
	</section>
	<section data-background-image="img/waders.jpg" data-background-opacity=".3">
	  <h1>The End</h1>
	  <a href="https://nitrofix.github.io/distributed-birds/" target="_blank">nitrofix.github.io/distributed-birds</a>
	</section>
      </div>
    </div>

    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.js"></script>

    <script>
      // More info about config & dependencies:
      // - https://github.com/hakimel/reveal.js#configuration
      // - https://github.com/hakimel/reveal.js#dependencies
      Reveal.initialize({
      autoPlayMedia: true,
      math: {
      mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js',
      config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html
      },
      dependencies: [
      { src: 'plugin/markdown/marked.js' },
      { src: 'plugin/markdown/markdown.js' },
      { src: 'plugin/notes/notes.js', async: true },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/math/math.js', async: true }
      ]
      });
    </script>
  </body>
</html>
